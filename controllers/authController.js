import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";
import User from "../models/User.js";
import generateToken from "../utils/generateToken.js";
import nodemailer from "nodemailer";
import { sendResetEmail } from "../utils/email.js";




// ‚úÖ ‘≥÷Ä’°’∂÷Å’∏÷Ç’¥ - ’Ñ’´’°’µ’∂ B2C ÷Ö’£’ø’°’ø’•÷Ä’•÷Ä’´ ’∞’°’¥’°÷Ä
export const registerB2CUser = async (req, res) => {
  try {
    const { firstName, lastName, email, password } = req.body;

    // ’ç’ø’∏÷Ç’£’∏÷Ç’¥ ’•’∂÷Ñ’ù ’°÷Ä’§’µ’∏÷Ñ ÷Ö’£’ø’°’ø’•÷Ä’® ’°÷Ä’§’•’∂ ’£÷Ä’°’∂÷Å’æ’°’Æ ’ß
    const existingUser = await User.findOne({ email });
    if (existingUser) {
      return res.status(400).json({ message: "User already exists" });
    }

    // ‘æ’°’Æ’Ø’°’£÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’£’°’≤’ø’∂’°’¢’°’º’®
    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(password, salt);

    // ’ç’ø’•’≤’Æ’∏÷Ç’¥ ’•’∂÷Ñ ’∂’∏÷Ä B2C ÷Ö’£’ø’°’ø’•÷Ä (role-’® ’Ω’°’∞’¥’°’∂’æ’°’Æ ’ß ’∏÷Ä’∫’•’Ω "b2c")
    const newUser = new User({
      firstName,
      lastName,
      email,
      password: hashedPassword,
      role: "b2c",
    });

    await newUser.save();
    res.status(201).json({ message: "User registered successfully" });

  } catch (error) {
    res.status(500).json({ message: "Server error", error: error.message });
  }
};

export const registerB2BUser = async (req, res) => {
  try {
    const { firstName, lastName, email, password, phone, address, role, companyName } = req.body;

    // ‚úÖ ’ç’°’∞’¥’°’∂’∏÷Ç’¥ ’•’∂÷Ñ ’©’∏÷Ç’µ’¨’°’ø÷Ä’•’¨’´ B2B role-’•÷Ä’®
    const allowedRoles = ["b2b_hotel_partner", "b2b_sales_partner"];

    // ‚úÖ ’ç’ø’∏÷Ç’£’∏÷Ç’¥ ’•’∂÷Ñ’ù ’°÷Ä’§’µ’∏’û÷Ñ ’®’∂’ø÷Ä’°’Æ role-’® ’©’∏÷Ç’µ’¨’°’ø÷Ä’•’¨’´ ’ß
    if (!allowedRoles.includes(role)) {
      return res.status(400).json({ message: "Invalid role selection" });
    }

    // ‚úÖ ’ç’ø’∏÷Ç’£’∏÷Ç’¥ ’•’∂÷Ñ’ù ’°÷Ä’§’µ’∏’û÷Ñ ÷Ö’£’ø’°’ø’•÷Ä’® ’°÷Ä’§’•’∂ ’£’∏’µ’∏÷Ç’©’µ’∏÷Ç’∂ ’∏÷Ç’∂’´
    const existingUser = await User.findOne({ email });
    if (existingUser) {
      return res.status(400).json({ message: "User already exists" });
    }

    // ‚úÖ ‘æ’°’Æ’Ø’°’£÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’£’°’≤’ø’∂’°’¢’°’º’®
    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(password, salt);

    // ‚úÖ ’ç’ø’•’≤’Æ’∏÷Ç’¥ ’•’∂÷Ñ ’∂’∏÷Ä B2B ÷Ö’£’ø’°’ø’•÷Ä
    const newUser = new User({
      firstName,
      lastName,
      email,
      phone,
      address,
      password: hashedPassword,
      role, // ‚úÖ role-’® ’Ø’°÷Ä’∏’≤ ’ß ’¨’´’∂’•’¨ ’¥’´’°’µ’∂ "b2b_hotel_partner" ’Ø’°’¥ "b2b_sales_partner"
      companyName, // ‚úÖ ’Ñ’´’°’µ’∂ B2B ÷Ö’£’ø’°’ø’•÷Ä’•÷Ä’´ ’∞’°’¥’°÷Ä
    });

    await newUser.save();
    res.status(201).json({ message: "B2B User registered successfully", user: { firstName, lastName, email, role, companyName } });

  } catch (error) {
    res.status(500).json({ message: "Server error", error: error.message });
  }
};

export const loginUser = async (req, res) => {
  try {
    const { email, password } = req.body;
    console.log("üõ†Ô∏è Debug: Login attempt for", email); // ‚úÖ Debugging log

    const user = await User.findOne({ email });
    if (!user) {
      console.log("üö® No user found with this email:", email);
      return res.status(400).json({ message: "Invalid credentials" });
    }

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      console.log("üö® Password does not match for", email);
      return res.status(400).json({ message: "Invalid credentials" });
    }

    console.log("‚úÖ Login successful for", email);
    generateToken(res, user._id, user.role);

    const { password: _, ...userData } = user._doc;
    res.status(200).json({ message: "Login successful", user: userData });
  } catch (error) {
    console.error("üö® Server error during login:", error.message);
    res.status(500).json({ message: "Server error", error: error.message });
  }
};


// ‚úÖ Logout - ’ã’∂’ª’∏÷Ç’¥ ’ß httpOnly cookie-’∂
export const logoutUser = async (req, res) => {
  try {
    res.clearCookie("authToken", { 
      httpOnly: true, 
      secure: process.env.NODE_ENV === "production", 
      sameSite: "Strict" 
    }); // ‚úÖ ’ã’∂’ª’∏÷Ç’¥ ’•’∂÷Ñ cookie-’∂
  
    res.status(200).json({ message: "Logged out successfully" });
  } catch (error) {
    res.status(500).json({ message: "Server error", error: error.message });
  }
};

export const requestPasswordReset = async (req, res) => {
  try {
    const { email } = req.body;
    const user = await User.findOne({ email });

    if (!user) {
      return res.status(404).json({ message: "User not found" });
    }

    const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET, { expiresIn: "1h" });
    await sendResetEmail(user.email, token); // ‚úÖ ’à÷Ç’≤’°÷Ä’Ø’∏÷Ç’¥ ’•’∂÷Ñ Reset Link-’®

    res.status(200).json({ message: "Password reset link sent successfully." });
  } catch (error) {
    res.status(500).json({ message: "Server error", error: error.message });
  }
};

export const resetPassword = async (req, res) => {
  try {
    const { token, newPassword } = req.body;
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    const user = await User.findById(decoded.userId);

    if (!user) {
      return res.status(404).json({ message: "Invalid token" });
    }

    const salt = await bcrypt.genSalt(10);
    user.password = await bcrypt.hash(newPassword, salt);
    await user.save();

    res.status(200).json({ message: "Password reset successfully." });
  } catch (error) {
    res.status(500).json({ message: "Server error", error: error.message });
  }
};

// ‚úÖ ’ç’ø’∏÷Ç’£’∏÷Ç’¥ ’ß’ù ’°÷Ä’§’µ’∏÷Ñ ÷Ö’£’ø’°’ø’•÷Ä’® ’¥’∏÷Ç’ø÷Ñ ’ß ’£’∏÷Ä’Æ’•’¨
export const checkAuthStatus = async (req, res) => {
  try {
    const user = await User.findById(req.user.id).select("firstName lastName role email phone address companyName balance avatar lastActiveAt loyaltyRate");
    if (!user) {
      return res.status(404).json({ message: "User not found" });
    }

    res.status(200).json({ message: "User authenticated", user });
  } catch (error) {
    res.status(500).json({ message: "Server error", error: error.message });
  }
};

// ‚úÖ ‘π’°÷Ä’¥’°÷Å’∂’∏÷Ç’¥ ’ß ÷Ö’£’ø’°’ø’´÷Ä’∏’ª ’∫÷Ä’∏÷Ü’´’¨’® (First Name, Last Name, Email, Phone, Address, Company Name)
export const updateOwnProfile = async (req, res) => {
  try {
    const { firstName, lastName, email, phone, address, companyName } = req.body;

    // ‚úÖ ’ç’ø’∏÷Ç’£’∏÷Ç’¥ ’•’∂÷Ñ, ’°÷Ä’§’µ’∏÷Ñ email-’® ’°÷Ä’§’•’∂ ’£’∏’µ’∏÷Ç’©’µ’∏÷Ç’∂ ’∏÷Ç’∂’´
    if (email) {
      const existingUser = await User.findOne({ email });
      if (existingUser && existingUser._id.toString() !== req.user.id) {
        return res.status(400).json({ message: "Email is already in use." });
      }
    }

    // ‚úÖ ‘π’°÷Ä’¥’°÷Å’∂’∏÷Ç’¥ ’•’∂÷Ñ ’ø’æ’µ’°’¨’∂’•÷Ä’®
    const updatedUser = await User.findByIdAndUpdate(
      req.user.id,
      { firstName, lastName, email, phone, address, companyName },
      { new: true }
    ).select("-password");

    if (!updatedUser) {
      return res.status(404).json({ message: "User not found." });
    }

    res.status(200).json({ message: "Profile updated successfully", user: updatedUser });
  } catch (error) {
    res.status(500).json({ message: "Server error", error: error.message });
  }
};

// ‚úÖ ‘π’°÷Ä’¥’°÷Å’∂’∏÷Ç’¥ ’ß ÷Ö’£’ø’°’ø’´÷Ä’∏’ª ’£’°’≤’ø’∂’°’¢’°’º’®
export const changePassword = async (req, res) => {
  try {
    const { oldPassword, newPassword } = req.body;

    // ’ç’ø’∏÷Ç’£’∏÷Ç’¥ ’•’∂÷Ñ, ’°÷Ä’§’µ’∏÷Ñ ’∂’∏÷Ä ’£’°’≤’ø’∂’°’¢’°’º’® ’¢’°’æ’°÷Ä’°÷Ä ’ß ’•÷Ä’Ø’°÷Ä’∏÷Ç’©’µ’°’¥’¢
    if (newPassword.length < 6) {
      return res.status(400).json({ message: "Password must be at least 6 characters long" });
    }

    // ’ç’ø’°’∂’∏÷Ç’¥ ’•’∂÷Ñ ÷Ö’£’ø’°’ø’´÷Ä’∏’ª ’ø’æ’µ’°’¨’∂’•÷Ä’®
    const user = await User.findById(req.user.id);
    if (!user) {
      return res.status(404).json({ message: "User not found" });
    }

    // ’ç’ø’∏÷Ç’£’∏÷Ç’¥ ’•’∂÷Ñ ’∞’´’∂ ’£’°’≤’ø’∂’°’¢’°’º’®
    const isMatch = await bcrypt.compare(oldPassword, user.password);
    if (!isMatch) {
      return res.status(400).json({ message: "Old password is incorrect" });
    }

    // ‘æ’°’Æ’Ø’°’£÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’∂’∏÷Ä ’£’°’≤’ø’∂’°’¢’°’º’®
    const salt = await bcrypt.genSalt(10);
    user.password = await bcrypt.hash(newPassword, salt);

    // ’ä’°’∞’∫’°’∂’∏÷Ç’¥ ’•’∂÷Ñ ’∂’∏÷Ä ’£’°’≤’ø’∂’°’¢’°’º’®
    await user.save();

    res.status(200).json({ message: "Password changed successfully" });
  } catch (error) {
    res.status(500).json({ message: "Server error", error: error.message });
  }
};



// ‚úÖ ’ï’£’ø’°’ø’´÷Ä’∏’ª ’∫÷Ä’∏÷Ü’´’¨’® ’Ω’ø’°’∂’°’¨’∏÷Ç ÷Ü’∏÷Ç’∂’Ø÷Å’´’° (Frontend-’´ ’∞’°’¥’°÷Ä)
export const getUserProfile = async (req, res) => {
  try {
    const user = await User.findById(req.user.id).select(
      "firstName lastName email phone address companyName balance role createdAt lastActiveAt avatar"
    );

    if (!user) {
      return res.status(404).json({ message: "User not found" });
    }

    // ‚úÖ ’é’•÷Ä’°’§’°÷Ä’±’∂’∏÷Ç’¥ ’•’∂÷Ñ ’°’¥’¢’∏’≤’ª’°’Ø’°’∂ URL, ’•’©’• avatar ’Ø’°
    const avatarUrl = user.avatar
      ? `http://localhost:5000${user.avatar}`
      : null;

    res.status(200).json({ ...user.toObject(), avatar: avatarUrl });
  } catch (error) {
    res.status(500).json({ message: "Server error", error: error.message });
  }
};